--------------------------------------------------------------------------------
*** Assume the following variables are already defined. ***

- numbers: array of int
- n: the size of the integer array (numbers)
- m: the number of first slots which already have values (m < n)
- num: the number to insert to the array
--------------------------------------------------------------------------------

* WRITE YOUR PSEUDOCODE HERE

-dont worry about fail case





-create variable i = m (for traversing)
-create j= m ( for traversing the other way once spot found)
-create temp variable to store shifting data

loop
-check num with the value at i

-if num > numbers[i-1], place num at numbers[i], update m to reflect new array size 
	-loop until j= i +/- 1?
	-temp = numbers[i+1]
	-numbers[i]=temp
	-j-1
-otherwise if num < numbers[i-1], i=i-1, move down array. 


end loop


I know once we reach somewhere between 2nd and 3rd step we need to account for the fact that we will need to shift 
the data down the array if the number doesnt belong in the end. To do this I assume we would need another temp variable 
to hold the data being shifted down however i'm struggling to implement this sort of sequence once we determine where num 
belongs in the array. Hopefully that makes sense, I have tryign to create this on paper but with no real progress.






define an int called i
define an int called j
define an int called temp

copy from 0 to i
copy from m to j

while ( i < m )
	if ( num > numbers[i])
		copy from i+1 to i
	else	* while numbers arent null 
		copy from i to j
		copy from numbers[j+1] to temp
		copy from num to numbers[i]
		* copy temp to next spot?














